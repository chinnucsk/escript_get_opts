#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable

-define(SPEC,
	[{align, $a, "align", atom,
	  "alignment: left (default) | right | center"},
	 {width, $w, "width", {integer, 70},
	  "width used by alignment (70)"},
	 {help, $h, "help", boolean,
	  "display this help and exit"}]).

main(Args) ->
    case getopt:parse(?SPEC, Args) of
	{ok, {Opts, MsgParts}} ->
	    maybe_help(Opts),
	    Msg = case MsgParts of
		      [] -> "Hello World!";
		      _ -> string:join(MsgParts, " ")
		  end,
	    Align = proplists:get_value(align, Opts),
	    Width = proplists:get_value(width, Opts),
	    io:format("~s~n", [format(Msg, Align, Width)]);
	{error, _} -> usage(1)
    end.

usage(Exit) ->
    getopt:usage(
      ?SPEC, "hello", "[message]",
      [{"message", "message to print (Hello World!)"}]),
    case Exit of
	0 ->
	    io:format("Prints a message to standard output, "
		      "aligning it with a particular number "
		      "of spaces (width). \n");
	_ -> ok
    end,
    erlang:halt(Exit).

maybe_help(Opts) ->
    case proplists:get_bool(help, Opts) of
	true -> usage(0);
	false -> ok
    end.

format(_, _, Width) when Width < 0 ->
    opt_error("invalid width");
format(Msg, undefined, Width)      ->
    string:left(Msg, Width);
format(Msg, left, Width)           ->
    string:left(Msg, Width);
format(Msg, right, Width)          ->
    string:right(Msg, Width);
format(Msg, center, Width)         ->
    string:centre(Msg, Width);
format(_, _, _)                    ->
    opt_error("invalid align option").

opt_error(Msg) ->
    io:format("Error: ~s~n", [Msg]),
    erlang:halt(1).



