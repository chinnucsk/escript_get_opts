#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname script

%%%% Edit options/usage message %%%%%

% Add your options here
-define(SPEC, [
	       {help, $h, "help", undefined,
		"display this help and exit"},
	       {verbose, $v, "verbose", {integer, 0},
		"raises output verbosity"},
	       {quiet, $q, "quiet", {integer, 0},
		"lowers output verbosity"},
	       {test, $t, "test", string,
		"optional string to output"}
	      ]).

usage(Exit) ->
    getopt:usage(
      ?SPEC, escript:script_name(), "[argument]",
      [{"argument", "description of the argument"}]
     ),
    case Exit of
	0 ->
	    io:format("A getopt template for escript\n");
	_ -> ok
    end,
    erlang:halt(Exit).

check_opts(Opts) ->
    check_opts(Opts, []).
check_opts([], []) ->
    ok;
check_opts([], ErrorList) ->
    io:format("Argument Errors:~n~s~n", [string:join(ErrorList, "\n")]),
    usage(1);
check_opts([{test, Test} | Opts], ErrorList) ->
    case is_list(Test) of
	true -> check_opts(Opts, ErrorList);
	false -> check_opts(Opts, ["unexpected value for '-t'"])
    end;
check_opts([_ | Opts], ErrorList) ->
    check_opts(Opts, ErrorList).


%%%%% Boilerplate helper functions %%%%%

% Checks for help option and displays help message and exits if present
check_help([]) ->
    ok;
check_help([help | _]) ->
    usage(0);
check_help([_ | T]) ->
    check_help(T).

%%%% Body of script %%%%%

% main/1 is the script's entry point
main(Args) ->
    case getopt:parse(?SPEC, Args) of
	{ok, {Opts, BareArgs}} ->
	    check_opts(Opts),
	    check_help(Opts),
	    script(Opts, BareArgs);
	{error, _} ->
	    usage(1)
    end.

%% Functions used in script go here

script(Opts, BareArgs) ->
    Verb = proplists:get_value(verbose, Opts) - proplists:get_value(quiet, Opts),
    Test = proplists:get_value(test, Opts),
    Arg = case BareArgs of
	      [] -> "argument";
	      _ -> string:join(BareArgs, " ")
	  end,
    display_arg(Arg, Verb, Test).

display_arg(Msg, Verb, undefined) ->
    display_arg(Msg, Verb);
display_arg(Msg, Verb, Test) ->
    case Verb < 0 of
	    true -> display_arg(Msg, Verb);
	    _    ->
			  io:format("Test is: ~s~n", [Test]),
			  display_arg(Msg, Verb)
    end.
display_arg(Msg, Verb) when Verb > 0 ->
    io:format("Verbosity is high: ~s~n", [erlang:integer_to_list(Verb)]),
    display_arg(Msg);
display_arg(Msg, Verb) when Verb =< 0 ->
    io:format("(~s)~n", [erlang:integer_to_list(Verb)]),
    display_arg(Msg).
display_arg(Msg) ->
    io:format("Argument is: ~s~n", [Msg]).
